quarkus.native.resources.includes=io/apicurio/mas/studio/storage/impl/sql/h2.ddl

# Additional index dependencies
quarkus.index-dependency.jaxrs.group-id=org.jboss.spec.javax.ws.rs
quarkus.index-dependency.jaxrs.artifact-id=jboss-jaxrs-api_2.1_spec

# Name and description
studio.id=mas-api-studio
studio.name=MAS API Studio (In Memory)
studio.description=Open Source API and Schema Editing Studio
studio.version=${project.version}
studio.date=${timestamp}

# Basic logging
quarkus.log.console.format=%d{YYYY-MM-dd HH:mm:ss} %p <%X{tenantId}> [%C] (%t) %m%n
quarkus.log.console.color=false

# Port and log levels
quarkus.http.port=${HTTP_PORT:8080}
quarkus.log.level=${LOG_LEVEL:INFO}
quarkus.log.category."io.apicurio".level=${STUDIO_LOG_LEVEL:DEBUG}
quarkus.log.console.enable=true
quarkus.package.type=legacy-jar

# Access logs
quarkus.http.access-log.enabled=${ENABLE_ACCESS_LOG:false}
quarkus.http.access-log.pattern="apicurio-studio.access method="%{METHOD}" path="%{REQUEST_URL}" response_code="%{RESPONSE_CODE}" response_time="%{RESPONSE_TIME}" remote_ip="%{REMOTE_IP}" remote_user="%{REMOTE_USER}" user_agent="%{i,User-Agent}""
#this property will be used by Quarkus 2.X
quarkus.http.access-log.exclude-pattern=/health/.*

# Redirects
studio.enable-redirects=${STUDIO_ENABLE_REDIRECTS:true}
studio.redirects.root=/,${STUDIO_ROOT_REDIRECT:/ui/}

quarkus.http.proxy.proxy-address-forwarding=${STUDIO_PROXY_ADDRESS_FORWARDING:false}

# UI Config
studio.ui.config.uiContextPath=${STUDIO_UI_CONFIG_UI_CONTEXT_PATH:/ui/}
studio.ui.config.apiUrl=${STUDIO_UI_CONFIG_APIURL:_}

# Include or exclude the stack trace in REST API error responses.
studio.api.errors.include-stack-in-response=${STUDIO_API_ERRORS_INCLUDE_STACKTRACE:false}

# Enable CORS always
quarkus.http.cors=true
quarkus.http.cors.origins=${CORS_ALLOWED_ORIGINS:}
quarkus.http.cors.methods=${CORS_ALLOWED_METHODS:GET,PUT,POST,PATCH,DELETE,OPTIONS}
quarkus.http.cors.headers=${CORS_ALLOWED_HEADERS:x-registry-name,x-registry-name-encoded,x-registry-description,x-registry-description-encoded,x-registry-version,x-registry-artifactid,x-registry-artifacttype,access-control-request-method,access-control-allow-credentials,access-control-allow-origin,access-control-allow-headers,authorization,content-type}

# Disable OpenAPI class scanning
mp.openapi.scan.disable=true
mp.openapi.servers=/apis/studio/v1

# The ignored error list
studio.liveness.errors.ignored=${LIVENESS_ERRORS_IGNORED:}

# Readiness and Liveness
studio.metrics.PersistenceExceptionLivenessCheck.errorThreshold=${LIVENESS_ERROR_THRESHOLD:5}
studio.metrics.PersistenceExceptionLivenessCheck.counterResetWindowDurationSec=${LIVENESS_COUNTER_RESET:30}
studio.metrics.PersistenceExceptionLivenessCheck.statusResetWindowDurationSec=${LIVENESS_STATUS_RESET:60}
studio.metrics.ResponseErrorLivenessCheck.errorThreshold=${LIVENESS_ERROR_THRESHOLD:5}
studio.metrics.ResponseErrorLivenessCheck.counterResetWindowDurationSec=${LIVENESS_COUNTER_RESET:30}
studio.metrics.ResponseErrorLivenessCheck.statusResetWindowDurationSec=${LIVENESS_STATUS_RESET:60}

studio.metrics.PersistenceTimeoutReadinessCheck.errorThreshold=${READINESS_ERROR_THRESHOLD:5}
studio.metrics.PersistenceTimeoutReadinessCheck.counterResetWindowDurationSec=${READINESS_COUNTER_RESET:30}
studio.metrics.PersistenceTimeoutReadinessCheck.statusResetWindowDurationSec=${READINESS_STATUS_RESET:60}
studio.metrics.PersistenceTimeoutReadinessCheck.timeoutSec=${READINESS_TIMEOUT:10}
studio.metrics.ResponseTimeoutReadinessCheck.errorThreshold=${READINESS_ERROR_THRESHOLD:5}
studio.metrics.ResponseTimeoutReadinessCheck.counterResetWindowDurationSec=${READINESS_COUNTER_RESET:30}
studio.metrics.ResponseTimeoutReadinessCheck.statusResetWindowDurationSec=${READINESS_STATUS_RESET:60}
studio.metrics.ResponseTimeoutReadinessCheck.timeoutSec=${READINESS_TIMEOUT:20}

studio.enable.multitenancy=false

quarkus.kafka.devservices.enabled=false

studio.organization-id.claim-name=${ORGANIZATION_ID_CLAIM:rh-org-id}

studio.storage.metrics.cache.check-period=30000
studio.limits.config.cache.check-period=30000

studio.multitenancy.reaper.every=${STUDIO_MT_REAPER_EVERY:3s}
studio.downloads.reaper.every=${STUDIO_DOWNLOADS_REAPER_EVERY:60s}


# Auth
studio.auth.enabled=${STUDIO_AUTH_ENABLED:${registry-legacy.auth.enabled}}

studio.auth.admin-override.enabled=${STUDIO_AUTH_ADMIN_OVERRIDE_ENABLED:false}
studio.auth.admin-override.from=${STUDIO_AUTH_ADMIN_OVERRIDE_FROM:token}
studio.auth.admin-override.type=${STUDIO_AUTH_ADMIN_OVERRIDE_TYPE:role}
studio.auth.admin-override.role=${STUDIO_AUTH_ADMIN_OVERRIDE_ROLE:sr-admin}
studio.auth.admin-override.claim=${STUDIO_AUTH_ADMIN_OVERRIDE_CLAIM:org-admin}
studio.auth.admin-override.claim-value=${STUDIO_AUTH_ADMIN_OVERRIDE_CLAIM_VALUE:true}
studio.auth.tenant-owner-is-admin.enabled=${STUDIO_AUTH_TENANT_OWNER_IS_ADMIN:true}


quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${studio.auth.enabled}

studio.keycloak.url=${KEYCLOAK_URL:http://localhost:8090/auth}
studio.keycloak.realm=${KEYCLOAK_REALM:apicurio-local}

studio.auth.url.configured=${studio.keycloak.url}/realms/${studio.keycloak.realm}

studio.auth.token.endpoint=${TOKEN_ENDPOINT:${studio.keycloak.url}/realms/${studio.keycloak.realm}/protocol/openid-connect/token}

quarkus.oidc.auth-server-url=${studio.keycloak.url}/realms/${studio.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:registry-api}
studio.auth.client-secret=${KEYCLOAK_API_CLIENT_SECRET:}


studio.ui.config.auth.keycloak.url=${studio.keycloak.url}
studio.ui.config.auth.keycloak.realm=${studio.keycloak.realm}
studio.ui.config.auth.keycloak.clientId=${KEYCLOAK_UI_CLIENT_ID:apicurio-registry}
studio.ui.config.auth.keycloak.onLoad=login-required

quarkus.http.non-application-root-path=/


# Disable liveness and readiness in test
%test.studio.metrics.ResponseTimeoutReadinessCheck.errorThreshold=10000
%test.studio.metrics.ResponseErrorLivenessCheck.errorThreshold=10000
%test.studio.metrics.ResponseErrorLivenessCheck.disableLogging=true
%test.studio.metrics.PersistenceTimeoutReadinessCheck.errorThreshold=10000
%test.studio.metrics.PersistenceExceptionLivenessCheck.errorThreshold=10000
%test.studio.metrics.PersistenceExceptionLivenessCheck.disableLogging=true


# Storage
quarkus.datasource.db-kind=h2
quarkus.datasource.jdbc.url=${STUDIO_DATASOURCE_URL:jdbc:h2:mem:STUDIO_db}
quarkus.datasource.username=${STUDIO_DATASOURCE_USERNAME:sa}
quarkus.datasource.password=${STUDIO_DATASOURCE_PASSWORD:sa}
quarkus.datasource.jdbc.initial-size=20
quarkus.datasource.jdbc.min-size=20
quarkus.datasource.jdbc.max-size=100
studio.sql.init=true

# Metrics

quarkus.micrometer.enabled=true
quarkus.micrometer.binder.http-server.enabled=false
quarkus.micrometer.binder.http-client.enabled=false
quarkus.micrometer.export.prometheus.enabled=true
quarkus.datasource.metrics.enabled=true
quarkus.datasource.jdbc.enable-metrics=true
