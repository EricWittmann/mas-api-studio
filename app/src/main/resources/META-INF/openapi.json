{
    "openapi": "3.0.2",
    "info": {
        "title": "MAS API Studio [v1]",
        "version": "1.0.0",
        "description": "Managed application services API Studio.",
        "contact": {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        }
    },
    "paths": {
        "/teams": {
            "summary": "Manage the collection of teams",
            "get": {
                "parameters": [
                    {
                        "name": "limit",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "offset",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "order",
                        "description": "",
                        "schema": {
                            "$ref": "#/components/schemas/SortOrder"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderby",
                        "description": "",
                        "schema": {
                            "$ref": "#/components/schemas/TeamSortBy"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamResults"
                                }
                            }
                        },
                        "description": "A list of teams."
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "listTeams",
                "summary": "List teams",
                "description": "Lists all of the teams visible to the authenticated user.\n\nThis operation may fail for one of the following reasons:\n\n* A server error occurred (HTTP error `500`)\n"
            },
            "post": {
                "requestBody": {
                    "description": "Information about the new team being created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewTeam"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The team was successfully created."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    }
                },
                "operationId": "createTeam",
                "summary": "Create a new team",
                "description": "Creates a new team.\n\nThis operation may fail for one of the following reasons:\n\n* The provided team name was invalid (HTTP error `400`)\n* A team with the provided name already exists (HTTP error `409`)\n* A server error occurred (HTTP error `500`)\n"
            }
        },
        "/teams/{teamName}": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        },
                        "description": "Information about a team."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "getTeam",
                "summary": "Get information about a team"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTeam"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Team was updated successfully."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "updateTeam",
                "summary": "Update team information"
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "The team was successfully deleted."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "deleteTeam",
                "summary": "Delete a team"
            },
            "parameters": [
                {
                    "name": "teamName",
                    "description": "Unique name of the team.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/teams/{teamName}/members": {
            "summary": "Manage the members of a team",
            "get": {
                "parameters": [
                    {
                        "name": "limit",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "offset",
                        "description": "",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "order",
                        "description": "",
                        "schema": {
                            "$ref": "#/components/schemas/SortOrder"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderby",
                        "description": "",
                        "schema": {
                            "$ref": "#/components/schemas/TeamMemberSortBy"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamMemberResults"
                                }
                            }
                        },
                        "description": "A list of team members."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "listMembers",
                "summary": "List team members"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewTeamMember"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The team member was added."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "addTeamMember",
                "summary": "Add a member to the team"
            },
            "parameters": [
                {
                    "name": "teamName",
                    "description": "Unique name of a team.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/teams/{teamName}/members/{principal}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": "The team member was removed."
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "deleteTeamMember",
                "summary": "Remove a team member"
            },
            "parameters": [
                {
                    "name": "principal",
                    "description": "The principal of a team member.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "teamName",
                    "description": "The unique name of the team.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/users/me": {
            "summary": "Retrieves information about the current user",
            "get": {
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfo"
                                }
                            }
                        },
                        "description": "Response when the endpoint is successfully invoked."
                    },
                    "500": {
                        "$ref": "#/components/responses/ServerError"
                    }
                },
                "operationId": "getCurrentUserInfo",
                "summary": "Get current user",
                "description": "Returns information about the currently authenticated user."
            }
        }
    },
    "components": {
        "schemas": {
            "Team": {
                "title": "Root Type for Team",
                "description": "",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "created-by": {
                        "description": "",
                        "type": "string"
                    }
                },
                "example": {
                    "name": "tiger-team",
                    "description": "Team dedicated to killing it."
                }
            },
            "NewTeam": {
                "title": "Root Type for NewTeam",
                "description": "",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "project-1-team",
                    "description": "A team of people working on a project."
                }
            },
            "ApiMetaData": {
                "title": "Root Type for ApiInfo",
                "description": "Meta information about an API.",
                "required": [
                    "created-by",
                    "created-on",
                    "latest-version",
                    "name",
                    "namespace",
                    "title"
                ],
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "latest-version": {
                        "type": "string"
                    },
                    "created-on": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "created-by": {
                        "type": "string"
                    }
                },
                "example": {
                    "namespace": "urn:example:logistics",
                    "name": "fraud-detection-api",
                    "title": "Fraud Detection API",
                    "description": "A simple API to detect fraud.",
                    "latest-version": "1.0.7",
                    "created-on": "2021-01-17T17:55:22Z",
                    "created-by": "bwayne@gotham.net"
                }
            },
            "ValidationError": {
                "description": "Error returned when an operation's input contains invalid data.",
                "type": "object",
                "allOf": [
                    {
                        "required": [
                            "property"
                        ],
                        "type": "object",
                        "properties": {
                            "property": {
                                "description": "",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ErrorInfo"
                    }
                ]
            },
            "UpdateTeam": {
                "title": "Root Type for UpdateTeam",
                "description": "",
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    }
                },
                "example": {
                    "description": "An updated description of the team."
                }
            },
            "TeamSortBy": {
                "description": "",
                "enum": [
                    "name",
                    "createdOn"
                ],
                "type": "string"
            },
            "TeamMemberSortBy": {
                "description": "",
                "enum": [
                    "name"
                ],
                "type": "string"
            },
            "TeamMemberResults": {
                "description": "",
                "type": "object",
                "allOf": [
                    {
                        "required": [
                            "members"
                        ],
                        "type": "object",
                        "properties": {
                            "members": {
                                "description": "",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TeamMember"
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/Results"
                    }
                ]
            },
            "Results": {
                "title": "Root Type for SearchResults",
                "description": "",
                "required": [
                    "count"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "format": "int32",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "example": {
                    "count": 100
                }
            },
            "TeamResults": {
                "title": "Root Type for TeamSearchResults",
                "description": "",
                "type": "object",
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "teams": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Team"
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/Results"
                    }
                ],
                "example": {
                    "count": 2,
                    "teams": [
                        {
                            "name": "team-1",
                            "description": "Description of team one."
                        },
                        {
                            "name": "team-2",
                            "description": "Description of team two."
                        }
                    ]
                }
            },
            "TeamMember": {
                "title": "Root Type for TeamMember",
                "description": "",
                "required": [
                    "principal"
                ],
                "type": "object",
                "properties": {
                    "principal": {
                        "type": "string"
                    }
                },
                "example": {
                    "principal": "bwayne@gotham.gov"
                }
            },
            "NewTeamMember": {
                "title": "Root Type for NewTeamMember",
                "description": "",
                "required": [
                    "principal"
                ],
                "type": "object",
                "properties": {
                    "principal": {
                        "type": "string"
                    }
                },
                "example": {
                    "principal": "dprince@themyscira.gov"
                }
            },
            "SortOrder": {
                "description": "",
                "enum": [
                    "asc",
                    "desc"
                ],
                "type": "string",
                "example": "\"asc\""
            },
            "UserInfo": {
                "title": "Root Type for UserInfo",
                "description": "Information about a single user.",
                "required": [
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                },
                "example": {
                    "username": "dprince",
                    "displayName": "Diana Prince"
                }
            },
            "ErrorInfo": {
                "title": "Root Type for ErrorInfo",
                "description": "Details about a specific error returned by the server.",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "error_code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "detail": {
                        "description": "",
                        "type": "string"
                    },
                    "name": {
                        "description": "",
                        "type": "string"
                    }
                },
                "example": {
                    "error_code": 500,
                    "message": "An error occurred on the server."
                }
            }
        },
        "responses": {
            "InvalidInput": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                },
                "description": ""
            },
            "BadRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInfo"
                        }
                    }
                },
                "description": "Common response for all operations that can return a `400` error."
            },
            "NotFound": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInfo"
                        }
                    }
                },
                "description": "The response returned when something is requested but cannot be found."
            },
            "ServerError": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorInfo"
                        }
                    }
                },
                "description": "The response sent from the server when an unexpected error occurs (for example \na database connection error)."
            }
        }
    },
    "x-codegen": {
        "contextRoot": "/apis/studio/v1",
        "bean-annotations": [
            "io.quarkus.runtime.annotations.RegisterForReflection",
            {
                "annotation": "lombok.Builder",
                "excludeEnums": true
            },
            {
                "annotation": "lombok.AllArgsConstructor",
                "excludeEnums": true
            },
            {
                "annotation": "lombok.NoArgsConstructor",
                "excludeEnums": true
            },
            {
                "annotation": "lombok.EqualsAndHashCode",
                "excludeEnums": true
            },
            {
                "annotation": "lombok.ToString",
                "excludeEnums": true
            }
        ]
    }
}